name: Publish

on:
  release:
    types: [prereleased, released]

jobs:
  grab-reference-assemblies:
    name: Get reference assemblies from Unity
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Cache Unity project
        uses: actions/cache@v3
        with:
          path: ./UnityProject/Library
          key: Library-UnityNetcodePatcher-linux-x64
          restore-keys: |
            Library-UnityNetcodePatcher-
            Library-

      - name: Restore Unity project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: ./UnityProject
          targetPlatform: StandaloneLinux64
          buildMethod: UnityBuilderAction.RestoreScript.Restore
          customParameters: -hostPlatform linux

      - name: Tree assembly source paths
        run: |
          sudo apt-get install tree
          tree ./UnityProject/Library/ScriptAssemblies/
          tree ./UnityProject/UnityEditor

      - name: Upload assemblies as build artifact
        uses: actions/upload-artifact@v4
        with:
          name: reference-assemblies
          path: |
            UnityProject/Library/ScriptAssemblies/
            UnityProject/UnityEditor/

  build-patchers:
    name: Build patcher for Netcode ${{ matrix.netcode-version }}
    needs: grab-reference-assemblies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        netcode-version: [ "1.5.2", "1.6.0", "1.7.0", "1.7.1", "1.8.0", "1.8.1" ]
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
          submodules: recursive

      - name: Fetch Reference Assemblies
        uses: actions/download-artifact@v4
        with:
          name: reference-assemblies
          path: UnityProject/

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.*"

      - name: Build patcher
        shell: bash
        run: |
          dotnet pack NetcodePatcher/NetcodePatcher.csproj -c Release -p:UnityNetcodeVersion="${{ matrix.netcode-version }}" -p:UnityEditorDir="${{ github.workspace }}/UnityProject/UnityEditor"

      - name: Upload assembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nv${{ matrix.netcode-version }}-patcher-assemblies
          path: "./NetcodePatcher/bin/Release/netstandard2.1/**/*"

      - name: Upload nupkg artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nv${{ matrix.netcode-version }}-patcher-nupkg-build
          path: "./NetcodePatcher/bin/Release/*.nupkg"

  build-cli-binaries:
    name: Build CLI for ${{ matrix.target }}
    needs: build-patchers
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        kind: [ 'linux', 'windows', 'macOS' ]
        include:
          - kind: linux
            target: linux-x64
            os: ubuntu-latest
          - kind: windows
            target: win-x64
            os: windows-latest
          - kind: macOS
            target: osx-x64
            os: macos-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
          submodules: recursive

      - name: Fetch Patcher Assemblies
        uses: actions/download-artifact@v4
        with:
          pattern: nv*-patcher-assemblies
          merge-multiple: true
          path: ./NetcodePatcher/bin/Release/netstandard2.1

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.*"

      - name: Build CLI binary
        shell: bash
        run: |
          dotnet build NetcodePatcher.Cli/NetcodePatcher.Cli.csproj -c ReleaseTools -t:CreateZip -r "${{ matrix.target }}" --self-contained true -f net8.0

      - name: Upload platform binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}-zip-build
          path: "./NetcodePatcher.Cli/bin/ReleaseTools/net8.0/${{ matrix.target }}/*.zip"

  build-cli-nupkg:
    name: Build CLI .nupkg
    needs: build-patchers
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
          submodules: recursive

      - name: Fetch Patcher Assemblies
        uses: actions/download-artifact@v4
        with:
          pattern: nv*-patcher-assemblies
          merge-multiple: true
          path: ./NetcodePatcher/bin/Release/netstandard2.1

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.*"

      - name: Pack CLI nupkg
        shell: bash
        run: |
          dotnet pack NetcodePatcher.Cli/NetcodePatcher.Cli.csproj -c ReleaseTools

      - name: Upload nupkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-nupkg-build
          path: "./NetcodePatcher.Cli/bin/ReleaseTools/*.nupkg"

  build-msbuild-nupkg:
    name: Build NetcodePatcher.MSBuild
    needs: build-patchers
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
          submodules: recursive

      - name: Fetch Patcher Assemblies
        uses: actions/download-artifact@v4
        with:
          pattern: nv*-patcher-assemblies
          merge-multiple: true
          path: ./NetcodePatcher/bin/Release/netstandard2.1

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.*"

      - name: Build MSBuild tasks
        run: |
          dotnet build NetcodePatcher.MSBuild.Tasks/NetcodePatcher.MSBuild.Tasks.csproj -c Release

      - name: Build MSBuild package
        shell: bash
        run: |
          dotnet pack NetcodePatcher.MSBuild/NetcodePatcher.MSBuild.csproj -c ReleaseTools

      - name: Upload nupkg Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msbuild-nupkg-build
          path: "./NetcodePatcher.MSBuild/bin/ReleaseTools/*.nupkg"

  upload-release-artifacts:
    name: Upload Release Artifacts
    needs: [build-cli-binaries, build-cli-nupkg, build-msbuild-nupkg, build-patchers]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Upload artifacts to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} \
          ./cli-*-zip-build/*.zip \
          ./cli-nupkg-build/*.nupkg \
          ./nv*-patcher-nupkg-build/*.nupkg \
          ./msbuild-nupkg-build/*.nupkg

  deploy-nuget:
    name: Deploy to NuGet
    needs: [build-patchers, build-cli-nupkg, build-msbuild-nupkg]
    runs-on: ubuntu-latest
    steps:
      - name: Download nupkg artifact
        uses: actions/download-artifact@v4
        with:
          path: ./nupkg-build
          pattern: "*-nupkg-build"
          merge-multiple: true

      - name: Publish to NuGet.org
        run: |
          dotnet nuget push ./nupkg-build/*.nupkg --api-key ${{ secrets.NUGET_API_TOKEN }} --source https://api.nuget.org/v3/index.json
